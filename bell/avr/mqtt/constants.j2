# This file is automatically @generated. DO NOT EDIT!
# fmt: off

from typing import Type, TypedDict

from .payloads import (
{%- for klass in topic_class.values()|unique %}
    {{ klass }},
    _{{ klass }}Callable,
{%- endfor %}
)


# List of MQTT topics
MQTTTopics = [
{%- for topic in topic_class.keys() %}
    "{{ topic }}",
{%- endfor %}
]

# List of MQTT payload types
MQTTPayloads = [
{%- for klass in topic_class.values()|unique %}
    {{ klass }},
{%- endfor %}
]

# TypedDict of topics to callback function signature
_MQTTTopicCallableTypedDict = TypedDict(
    "_MQTTTopicCallableTypedDict",
    {
{%- for topic, klass in topic_class.items() %}
        "{{ topic }}": _{{ klass }}Callable,
{%- endfor %}
    },
    total=False
)

# Actual dictionary of topics to callback function signature
MQTTTopicCallable: _MQTTTopicCallableTypedDict = {
{%- for topic, klass in topic_class.items() %}
    "{{ topic }}": _{{ klass }}Callable,
{%- endfor %}
}


# TypedDict of topics to associated payloads
_MQTTTopicPayloadTypedDict = TypedDict(
    "_MQTTTopicPayloadTypedDict",
    {
{%- for topic, klass in topic_class.items() %}
        "{{ topic }}": {{ klass }},
{%- endfor %}
    },
    total=False
)

# TypedDict of topics to associated payload types
_MQTTTopicPayloadTypeTypedDict = TypedDict(
    "_MQTTTopicPayloadTypeTypedDict",
    {
{%- for topic, klass in topic_class.items() %}
        "{{ topic }}": Type[{{ klass }}],
{%- endfor %}
    },
    total=False
)

# Actual dictionary of topics to associated payload types
MQTTTopicPayload: _MQTTTopicPayloadTypeTypedDict = {
{%- for topic, klass in topic_class.items() %}
    "{{ topic }}": {{ klass }},
{%- endfor %}
}
