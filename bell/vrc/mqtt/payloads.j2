{% macro class(item, suffix) %}
class {{ item.name }}{{ suffix }}(TypedDict):
{%- if ('docs' in item and item['docs']|length > 0) %}
    """
    {{ item.docs }}
    """
{% endif -%}
{%- if item.payload|length == 0 and ('docs' not in item or item['docs']|length == 0) %}
    pass
{%- else -%}
{%- for p in item.payload %}
    {{ p.key }}: {% if 'list' in p and p['list'] %}List[{{ p.type }}]{% else %}{{ p.type }}{% endif %}
{%- if 'docs' in p and p['docs']|length > 0 %}
    """
    {{ p.docs }}
    """
{%- endif %}
{%- endfor %}
{%- endif %}
{% endmacro -%}

# This file is automatically generated. DO NOT EDIT!
# fmt: off

from __future__ import annotations

from typing import Any, List, Literal, Optional, Protocol, Tuple, TypedDict

# ======== helper classes ========

{% for klass in klasses %}
{{ class(klass, "") }}
{% endfor %}
# =========== payloads ===========

{% for topic in topics %}
{{ class(topic, "Payload") }}

class _{{ topic.name }}Callable(Protocol):
    """
    Class used only for type-hinting MQTT callbacks
    """
    def __call__(self, payload: {{ topic.name }}Payload) -> Any:
        ...
{% endfor %}
